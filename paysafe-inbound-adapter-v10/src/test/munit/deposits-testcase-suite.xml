<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  	xmlns:mock="http://www.mulesoft.org/schema/mule/mock" 
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
    <munit:config name="munit" mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
   <spring:beans>
        <spring:import resource="classpath:api.xml"/>
        <spring:import resource="classpath:clienttoken.xml"/>
        <spring:import resource="classpath:config.xml"/>
        <spring:import resource="classpath:deposits.xml"/>
        <spring:import resource="classpath:threedsecure.xml"/>
        <spring:import resource="classpath:instrument.xml"/>
        <spring:import resource="classpath:checkstatus.xml"/>
        <spring:import resource="classpath:error-handler.xml"/>
        <spring:import resource="classpath:withdrawals.xml"/>

    </spring:beans>
  
    <munit:test name="DepositsFlow-TestCase1(SuccessScenario)" description="Verifying deposits flow with test request for success scenario">
        <mock:when messageProcessor=".*:.*" doc:name="Mock Authorization API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Authorization API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['{&quot;links&quot;:[{&quot;rel&quot;:&quot;settlement&quot;,&quot;href&quot;:&quot;https://api.test.paysafe.com/cardpayments/v1/accounts/1001218660/settlements/1540d057-ac93-4501-95d0-8f729b7247dc&quot;},{&quot;rel&quot;:&quot;self&quot;,&quot;href&quot;:&quot;https://api.test.paysafe.com/cardpayments/v1/accounts/1001218660/auths/1540d057-ac93-4501-95d0-8f729b7247dc&quot;}],&quot;id&quot;:&quot;1540d057-ac93-4501-95d0-8f729b7247dc&quot;,&quot;merchantRefNum&quot;:&quot;7789271&quot;,&quot;txnTime&quot;:&quot;2018-06-06T07:13:08Z&quot;,&quot;status&quot;:&quot;COMPLETED&quot;,&quot;amount&quot;:100000,&quot;settleWithAuth&quot;:true,&quot;preAuth&quot;:false,&quot;availableToSettle&quot;:0,&quot;card&quot;:{&quot;type&quot;:&quot;VI&quot;,&quot;lastDigits&quot;:&quot;2345&quot;,&quot;cardExpiry&quot;:{&quot;month&quot;:12,&quot;year&quot;:2020}},&quot;authentication&quot;:{&quot;eci&quot;:5,&quot;cavv&quot;:&quot;AAABBhkXYgAAAAACBxdiENhf7A+=&quot;},&quot;authCode&quot;:&quot;100869&quot;,&quot;profile&quot;:{&quot;firstName&quot;:&quot;Joe&quot;,&quot;lastName&quot;:&quot;Smith&quot;,&quot;email&quot;:&quot;Joe.Smith@canada.com&quot;},&quot;billingDetails&quot;:{&quot;street&quot;:&quot;100 Queen Street West&quot;,&quot;city&quot;:&quot;Toronto&quot;,&quot;state&quot;:&quot;ON&quot;,&quot;country&quot;:&quot;CA&quot;,&quot;zip&quot;:&quot;M5H2N2&quot;,&quot;phone&quot;:&quot;9874561230&quot;},&quot;customerIp&quot;:&quot;204.91.0.12&quot;,&quot;merchantDescriptor&quot;:{&quot;dynamicDescriptor&quot;:&quot;DD Line 1&quot;,&quot;phone&quot;:&quot;000-111000099&quot;},&quot;visaAdditionalAuthData&quot;:{},&quot;description&quot;:&quot;Videopurchase&quot;,&quot;currencyCode&quot;:&quot;GBP&quot;,&quot;avsResponse&quot;:&quot;MATCH&quot;,&quot;cvvVerification&quot;:&quot;NOT_PROCESSED&quot;,&quot;settlements&quot;:[{&quot;links&quot;:[{&quot;rel&quot;:&quot;self&quot;,&quot;href&quot;:&quot;https://api.test.paysafe.com/cardpayments/v1/accounts/1001218660/settlements/1540d057-ac93-4501-95d0-8f729b7247dc&quot;}],&quot;id&quot;:&quot;1540d057-ac93-4501-95d0-8f729b7247dc&quot;,&quot;merchantRefNum&quot;:&quot;7789271&quot;,&quot;txnTime&quot;:&quot;2018-06-06T07:13:08Z&quot;,&quot;status&quot;:&quot;PENDING&quot;,&quot;amount&quot;:1000,&quot;availableToRefund&quot;:1000}]}']"/>
        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy on pre publish to queue">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['paymentCmf Queue']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-on-equals expectedValue="#['{&quot;OrderId&quot;:7789271,&quot;ClientIp&quot;:&quot;204.91.0.12&quot;,&quot;ProviderReference&quot;:&quot;1540d057-ac93-4501-95d0-8f729b7247dc&quot;,&quot;ProviderCode&quot;:&quot;0000&quot;,&quot;ProviderMessage&quot;:&quot;COMPLETED&quot;,&quot;ProviderApproved&quot;:&quot;true&quot;,&quot;CurrencyReceived&quot;:&quot;GBP&quot;,&quot;AmountReceived&quot;:1000.0,&quot;ClientAccNo&quot;:&quot;JoeSmith&quot;,&quot;ClientAccName&quot;:&quot;JoeSmith&quot;,&quot;AVSres&quot;:&quot;MATCH&quot;,&quot;Country&quot;:&quot;&quot;,&quot;InstrumentType&quot;:&quot;Card account&quot;}']" actualValue="#[payload.toString()]" doc:name="Check Response to Queue" message="Response message is not valid as expected"/>
            </mock:assertions-before-call>
        </mock:spy>
        <munit:set payload="#['{&quot;CustomerId&quot;:&quot;1198000012345&quot;,&quot;OrderId&quot;:7789233,&quot;ProductId&quot;:287,&quot;LegalEntity&quot;:&quot;Axicorp Limited&quot;,&quot;Currency&quot;:&quot;GBP&quot;,&quot;Amount&quot;:1000,&quot;ClientIp&quot;:&quot;204.91.0.12&quot;,&quot;ClientSessionId&quot;:&quot;QWE!@#wasdferty&quot;,&quot;SystemSourceId&quot;:6,&quot;InstrumentToken&quot;:&quot;C58vIo0FlWWydf4&quot;,&quot;Client&quot;:{&quot;FirstName&quot;:&quot;Joe&quot;,&quot;LastName&quot;:&quot;Smith&quot;,&quot;Address&quot;:&quot;100 Queen Street West&quot;,&quot;City&quot;:&quot;Toronto&quot;,&quot;Country&quot;:&quot;CA&quot;,&quot;State&quot;:&quot;ON&quot;,&quot;Postcode&quot;:&quot;M5H 2N2&quot;,&quot;Email&quot;:&quot;Joe.Smith@canada.com&quot;,&quot;Phone&quot;:&quot;9874561230&quot;},&quot;3DSInfo&quot;:{&quot;ECI&quot;:&quot;5&quot;,&quot;CAVV&quot;:&quot;AAABBhkXYgAAAAACBxdiENhf7A+=&quot;},&quot;AdditionalInfo&quot;:{}}']" doc:name="Set Request Payload"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <logger message="#['Request Payload \n CustomerId : '+payload.CustomerId+'\n OrderId : '+payload.OrderId+'\n ProductId : '+payload.ProductId+'\n LegalEntity: '+payload.LegalEntity+'\n Currency: '+payload.Currency+'\n Amount: '+payload.Amount+'\n ClientIp: '+payload.ClientIp+'\n InstrumentToken: '+payload.InstrumentToken+'\n FirstName: '+payload.Client.FirstName+'\n LastName: '+payload.Client.LastName+'\n Phone: '+payload.Client.Phone+'\n Country: '+payload.Client.Country+'\n Email: '+payload.Client.Email+'\n ECI: '+payload.3DSInfo.ECI+'\n CAVV: '+payload.3DSInfo.CAVV+'\n']" level="INFO" doc:name="Request Payload" category="MUnit Test || DepositsFlow-TestCase1(SuccessScenario)"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <flow-ref name="depositsFlow" doc:name="Flow-ref to depositsFlow"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <logger level="INFO" doc:name="Response Payload" message="#['Response Payload \n OrderId : '+payload.OrderId+'\n ProviderReference : '+payload.ProviderReference+'\n ClientRedirectURL : '+payload.ClientRedirectURL+'\n ClientRedirectType: '+payload.ClientRedirectType+'\n PostParameters: '+payload.PostParameters+'\n PostPayload: '+payload.PostPayload+'\n RecommendedDisplayType: '+payload.RecommendedDisplayType+'\n RecommendedDisplayWidth: '+payload.RecommendedDisplayWidth+'\n RecommendedDisplayHeight: '+payload.RecommendedDisplayHeight+'\n PaymentStatus: '+payload.PaymentStatus+'\n PaymentCode: '+payload.PaymentCode+'\n PaymentMessage: '+payload.PaymentMessage+'\n CardType: '+payload.AdditionalInfo.CardType+'\n IsDebit: '+payload.AdditionalInfo.IsDebit+'\n CardIssuedCountry: '+payload.AdditionalInfo.CardIssuedCountry+'\n AuthCode: '+payload.AdditionalInfo.AuthCode+'\n']" category="MUnit Test || DepositsFlow-TestCase1(SuccessScenario)"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-on-equals expectedValue="#['{&quot;ClientRedirectType&quot;:&quot;NA&quot;,&quot;AdditionalInfo&quot;:{&quot;CardType&quot;:&quot;Visa&quot;,&quot;IsDebit&quot;:&quot;false&quot;,&quot;CardIssuedCountry&quot;:&quot;AU&quot;,&quot;AuthCode&quot;:&quot;100869&quot;},&quot;PaymentCode&quot;:&quot;0000&quot;,&quot;PostPayload&quot;:&quot;&quot;,&quot;RecommendedDisplayWidth&quot;:0,&quot;OrderId&quot;:7789271,&quot;ClientRedirectURL&quot;:&quot;&quot;,&quot;PaymentMessage&quot;:&quot;COMPLETED&quot;,&quot;RecommendedDisplayType&quot;:&quot;None&quot;,&quot;ProviderReference&quot;:&quot;1540d057-ac93-4501-95d0-8f729b7247dc&quot;,&quot;PostParameters&quot;:&quot;&quot;,&quot;PaymentStatus&quot;:&quot;ACCEPTED&quot;,&quot;RecommendedDisplayHeight&quot;:0}']" actualValue="#[payload]" doc:name="Check Response Payload" message="Response message is not valid as expected"/>
    </munit:test>
    <munit:test name="DepositsFlow-TestCase2(SuccessScenarioforAmountLogic)" description="Verifying deposits flow with test request for success scenario">
        <mock:spy messageProcessor=".*:.*" doc:name="Spy on Amount field before HTTP">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Transform to Deposits Request ']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <logger message="#[payload.Amount]" level="INFO" category="MUnit Test || DepositsFlow-TestCase2(SuccessScenarioforAmountLogic)" doc:name="Amount Before Groovy"/>
                <munit:assert-on-equals message="Response message is not valid as expected" expectedValue="#['1000.12']" actualValue="#[payload.Amount.toString()]" doc:name="Assert Amount"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <logger message="#[json:amount]" level="INFO" category="MUnit Test || DepositsFlow-TestCase2(SuccessScenarioforAmountLogic)" doc:name="Amount After Groovy"/>
                <munit:assert-on-equals message="Response message is not valid as expected" expectedValue="#['100012']" actualValue="#[json:amount]" doc:name="Assert Amount"/>
            </mock:assertions-after-call>
        </mock:spy>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Authorization API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Authorization API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['{&quot;links&quot;:[{&quot;rel&quot;:&quot;settlement&quot;,&quot;href&quot;:&quot;https://api.test.paysafe.com/cardpayments/v1/accounts/1001218660/settlements/1540d057-ac93-4501-95d0-8f729b7247dc&quot;},{&quot;rel&quot;:&quot;self&quot;,&quot;href&quot;:&quot;https://api.test.paysafe.com/cardpayments/v1/accounts/1001218660/auths/1540d057-ac93-4501-95d0-8f729b7247dc&quot;}],&quot;id&quot;:&quot;1540d057-ac93-4501-95d0-8f729b7247dc&quot;,&quot;merchantRefNum&quot;:&quot;7789271&quot;,&quot;txnTime&quot;:&quot;2018-06-06T07:13:08Z&quot;,&quot;status&quot;:&quot;COMPLETED&quot;,&quot;amount&quot;:100012,&quot;settleWithAuth&quot;:true,&quot;preAuth&quot;:false,&quot;availableToSettle&quot;:0,&quot;card&quot;:{&quot;type&quot;:&quot;VI&quot;,&quot;lastDigits&quot;:&quot;2345&quot;,&quot;cardExpiry&quot;:{&quot;month&quot;:12,&quot;year&quot;:2020}},&quot;authentication&quot;:{&quot;eci&quot;:5,&quot;cavv&quot;:&quot;AAABBhkXYgAAAAACBxdiENhf7A+=&quot;},&quot;authCode&quot;:&quot;100869&quot;,&quot;profile&quot;:{&quot;firstName&quot;:&quot;Joe&quot;,&quot;lastName&quot;:&quot;Smith&quot;,&quot;email&quot;:&quot;Joe.Smith@canada.com&quot;},&quot;billingDetails&quot;:{&quot;street&quot;:&quot;100 Queen Street West&quot;,&quot;city&quot;:&quot;Toronto&quot;,&quot;state&quot;:&quot;ON&quot;,&quot;country&quot;:&quot;CA&quot;,&quot;zip&quot;:&quot;M5H2N2&quot;,&quot;phone&quot;:&quot;9874561230&quot;},&quot;customerIp&quot;:&quot;204.91.0.12&quot;,&quot;merchantDescriptor&quot;:{&quot;dynamicDescriptor&quot;:&quot;DD Line 1&quot;,&quot;phone&quot;:&quot;000-111000099&quot;},&quot;visaAdditionalAuthData&quot;:{},&quot;description&quot;:&quot;Videopurchase&quot;,&quot;currencyCode&quot;:&quot;GBP&quot;,&quot;avsResponse&quot;:&quot;MATCH&quot;,&quot;cvvVerification&quot;:&quot;NOT_PROCESSED&quot;,&quot;settlements&quot;:[{&quot;links&quot;:[{&quot;rel&quot;:&quot;self&quot;,&quot;href&quot;:&quot;https://api.test.paysafe.com/cardpayments/v1/accounts/1001218660/settlements/1540d057-ac93-4501-95d0-8f729b7247dc&quot;}],&quot;id&quot;:&quot;1540d057-ac93-4501-95d0-8f729b7247dc&quot;,&quot;merchantRefNum&quot;:&quot;7789271&quot;,&quot;txnTime&quot;:&quot;2018-06-06T07:13:08Z&quot;,&quot;status&quot;:&quot;PENDING&quot;,&quot;amount&quot;:100012,&quot;availableToRefund&quot;:100012}]}']"/>
        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy on Amount field after HTTP">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['PaymentCmf Transformation']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <logger message="#[payload.amount]" level="INFO" category="MUnit Test || DepositsFlow-TestCase2(SuccessScenarioforAmountLogic)" doc:name="Amount Before Groovy"/>
                <munit:assert-on-equals message="Response message is not valid as expected" expectedValue="#['100012']" actualValue="#[payload.amount.toString()]" doc:name="Assert Amount"/>
            </mock:assertions-before-call>
            <mock:assertions-after-call>
                <logger message="#[payload.AmountReceived]" level="INFO" category="MUnit Test || DepositsFlow-TestCase2(SuccessScenarioforAmountLogic)" doc:name="Amount Before Groovy"/>
                <munit:assert-on-equals message="Response message is not valid as expected" expectedValue="#['1000.12']" actualValue="#[payload.AmountReceived.toString()]" doc:name="Assert Amount"/>
            </mock:assertions-after-call>
        </mock:spy>
        <munit:set payload="#['{&quot;CustomerId&quot;:&quot;1198000012345&quot;,&quot;OrderId&quot;:7789233,&quot;ProductId&quot;:287,&quot;LegalEntity&quot;:&quot;Axicorp Limited&quot;,&quot;Currency&quot;:&quot;GBP&quot;,&quot;Amount&quot;:1000.12,&quot;ClientIp&quot;:&quot;204.91.0.12&quot;,&quot;ClientSessionId&quot;:&quot;QWE!@#wasdferty&quot;,&quot;SystemSourceId&quot;:6,&quot;InstrumentToken&quot;:&quot;C58vIo0FlWWydf4&quot;,&quot;Client&quot;:{&quot;FirstName&quot;:&quot;Joe&quot;,&quot;LastName&quot;:&quot;Smith&quot;,&quot;Address&quot;:&quot;100 Queen Street West&quot;,&quot;City&quot;:&quot;Toronto&quot;,&quot;Country&quot;:&quot;CA&quot;,&quot;State&quot;:&quot;ON&quot;,&quot;Postcode&quot;:&quot;M5H 2N2&quot;,&quot;Email&quot;:&quot;Joe.Smith@canada.com&quot;,&quot;Phone&quot;:&quot;9874561230&quot;},&quot;3DSInfo&quot;:{&quot;ECI&quot;:&quot;5&quot;,&quot;CAVV&quot;:&quot;AAABBhkXYgAAAAACBxdiENhf7A+=&quot;},&quot;AdditionalInfo&quot;:{}}']" doc:name="Set Request Payload"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <logger message="#['Request Payload \n CustomerId : '+payload.CustomerId+'\n OrderId : '+payload.OrderId+'\n ProductId : '+payload.ProductId+'\n LegalEntity: '+payload.LegalEntity+'\n Currency: '+payload.Currency+'\n Amount: '+payload.Amount+'\n ClientIp: '+payload.ClientIp+'\n InstrumentToken: '+payload.InstrumentToken+'\n FirstName: '+payload.Client.FirstName+'\n LastName: '+payload.Client.LastName+'\n Phone: '+payload.Client.Phone+'\n Country: '+payload.Client.Country+'\n Email: '+payload.Client.Email+'\n ECI: '+payload.3DSInfo.ECI+'\n CAVV: '+payload.3DSInfo.CAVV+'\n']" level="INFO" category="MUnit Test || DepositsFlow-TestCase2(SuccessScenarioforAmountLogic)" doc:name="Request Payload"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <flow-ref name="depositsFlow" doc:name="Flow-ref to depositsFlow"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <logger message="#['Response Payload \n OrderId : '+payload.OrderId+'\n ProviderReference : '+payload.ProviderReference+'\n ClientRedirectURL : '+payload.ClientRedirectURL+'\n ClientRedirectType: '+payload.ClientRedirectType+'\n PostParameters: '+payload.PostParameters+'\n PostPayload: '+payload.PostPayload+'\n RecommendedDisplayType: '+payload.RecommendedDisplayType+'\n RecommendedDisplayWidth: '+payload.RecommendedDisplayWidth+'\n RecommendedDisplayHeight: '+payload.RecommendedDisplayHeight+'\n PaymentStatus: '+payload.PaymentStatus+'\n PaymentCode: '+payload.PaymentCode+'\n PaymentMessage: '+payload.PaymentMessage+'\n CardType: '+payload.AdditionalInfo.CardType+'\n IsDebit: '+payload.AdditionalInfo.IsDebit+'\n CardIssuedCountry: '+payload.AdditionalInfo.CardIssuedCountry+'\n AuthCode: '+payload.AdditionalInfo.AuthCode+'\n']" level="INFO" category="MUnit Test || DepositsFlow-TestCase2(SuccessScenarioforAmountLogic)" doc:name="Response Payload"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-on-equals message="Response message is not valid as expected" expectedValue="#['{&quot;ClientRedirectType&quot;:&quot;NA&quot;,&quot;AdditionalInfo&quot;:{&quot;CardType&quot;:&quot;Visa&quot;,&quot;IsDebit&quot;:&quot;false&quot;,&quot;CardIssuedCountry&quot;:&quot;AU&quot;,&quot;AuthCode&quot;:&quot;100869&quot;},&quot;PaymentCode&quot;:&quot;0000&quot;,&quot;PostPayload&quot;:&quot;&quot;,&quot;RecommendedDisplayWidth&quot;:0,&quot;OrderId&quot;:7789271,&quot;ClientRedirectURL&quot;:&quot;&quot;,&quot;PaymentMessage&quot;:&quot;COMPLETED&quot;,&quot;RecommendedDisplayType&quot;:&quot;None&quot;,&quot;ProviderReference&quot;:&quot;1540d057-ac93-4501-95d0-8f729b7247dc&quot;,&quot;PostParameters&quot;:&quot;&quot;,&quot;PaymentStatus&quot;:&quot;ACCEPTED&quot;,&quot;RecommendedDisplayHeight&quot;:0}']" actualValue="#[payload]" doc:name="Check Response Payload"/>
    </munit:test>
    <munit:test name="DepositsFlow-TestCase3(FailureScenariowithExistingOrderId)" description="This test case is used to validate existing OrderId field coming from request payload , remaining fields are valid   " >
        <mock:spy messageProcessor=".*:.*" doc:name="Spy on pre publish to queue">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['paymentCmf Queue']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-on-equals expectedValue="#['{&quot;OrderId&quot;:&quot;&quot;,&quot;ClientIp&quot;:&quot;&quot;,&quot;ProviderReference&quot;:&quot;&quot;,&quot;ProviderCode&quot;:&quot;5031&quot;,&quot;ProviderMessage&quot;:&quot;The transaction you have submitted has already been processed.&quot;,&quot;ProviderApproved&quot;:false,&quot;CurrencyReceived&quot;:&quot;&quot;,&quot;AmountReceived&quot;:&quot;&quot;,&quot;ClientAccNo&quot;:&quot;&quot;,&quot;ClientAccName&quot;:&quot;&quot;,&quot;AVSres&quot;:&quot;&quot;,&quot;Country&quot;:&quot;&quot;,&quot;InstrumentType&quot;:&quot;&quot;}']" actualValue="#[payload.toString()]" doc:name="Check Response to Queue" message="Response message is not valid as expected"/>
            </mock:assertions-before-call>
        </mock:spy>
        <munit:set payload="#['{&quot;CustomerId&quot;:&quot;1198000012345&quot;,&quot;OrderId&quot;:7789231,&quot;ProductId&quot;:287,&quot;LegalEntity&quot;:&quot;Axicorp Limited&quot;,&quot;Currency&quot;:&quot;USD&quot;,&quot;Amount&quot;:1000,&quot;ClientIp&quot;:&quot;204.91.0.12&quot;,&quot;ClientSessionId&quot;:&quot;QWE!@#wasdferty&quot;,&quot;SystemSourceId&quot;:6,&quot;InstrumentToken&quot;:&quot;C58vIo0FlWWydf4&quot;,&quot;Client&quot;:{&quot;FirstName&quot;:&quot;Joe&quot;,&quot;LastName&quot;:&quot;Smith&quot;,&quot;Address&quot;:&quot;100 Queen Street West&quot;,&quot;City&quot;:&quot;Toronto&quot;,&quot;Country&quot;:&quot;CA&quot;,&quot;State&quot;:&quot;ON&quot;,&quot;Postcode&quot;:&quot;M5H 2N2&quot;,&quot;Email&quot;:&quot;Joe.Smith@canada.com&quot;,&quot;Phone&quot;:&quot;9874561230&quot;},&quot;3DSInfo&quot;:{&quot;ECI&quot;:&quot;5&quot;,&quot;CAVV&quot;:&quot;AAABBhkXYgAAAAACBxdiENhf7A+=&quot;},&quot;AdditionalInfo&quot;:{}}']" doc:name="Set Request Payload"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <logger message="#['Request Payload \n CustomerId : '+payload.CustomerId+'\n OrderId : '+payload.OrderId+'\n ProductId : '+payload.ProductId+'\n LegalEntity: '+payload.LegalEntity+'\n Currency: '+payload.Currency+'\n Amount: '+payload.Amount+'\n ClientIp: '+payload.ClientIp+'\n InstrumentToken: '+payload.InstrumentToken+'\n FirstName: '+payload.Client.FirstName+'\n LastName: '+payload.Client.LastName+'\n Phone: '+payload.Client.Phone+'\n Country: '+payload.Client.Country+'\n Email: '+payload.Client.Email+'\n ECI: '+payload.3DSInfo.ECI+'\n CAVV: '+payload.3DSInfo.CAVV+'\n']" level="INFO" category="MUnit Test || DepositsFlow-TestCase3(FailureScenariowithExistingOrderId)" doc:name="Request Payload"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <flow-ref name="depositsFlow" doc:name="Flow-ref to depositsFlow"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <logger message="#['Response Payload \n OrderId : '+payload.OrderId+'\n ProviderReference : '+payload.ProviderReference+'\n ClientRedirectURL : '+payload.ClientRedirectURL+'\n ClientRedirectType: '+payload.ClientRedirectType+'\n PostParameters: '+payload.PostParameters+'\n PostPayload: '+payload.PostPayload+'\n RecommendedDisplayType: '+payload.RecommendedDisplayType+'\n RecommendedDisplayWidth: '+payload.RecommendedDisplayWidth+'\n RecommendedDisplayHeight: '+payload.RecommendedDisplayHeight+'\n PaymentStatus: '+payload.PaymentStatus+'\n PaymentCode: '+payload.PaymentCode+'\n PaymentMessage: '+payload.PaymentMessage+'\n CardType: '+payload.AdditionalInfo.CardType+'\n IsDebit: '+payload.AdditionalInfo.IsDebit+'\n CardIssuedCountry: '+payload.AdditionalInfo.CardIssuedCountry+'\n AuthCode: '+payload.AdditionalInfo.AuthCode+'\n']" level="INFO" doc:name="Response Payload" category="MUnit Test || DepositsFlow-TestCase3(FailureScenariowithExistingOrderId)"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <munit:assert-on-equals expectedValue="#['{&quot;ClientRedirectType&quot;:&quot;NA&quot;,&quot;AdditionalInfo&quot;:{&quot;CardType&quot;:&quot;&quot;,&quot;IsDebit&quot;:&quot;&quot;,&quot;CardIssuedCountry&quot;:&quot;&quot;,&quot;AuthCode&quot;:&quot;&quot;},&quot;PaymentCode&quot;:&quot;5031&quot;,&quot;PostPayload&quot;:&quot;&quot;,&quot;RecommendedDisplayWidth&quot;:0,&quot;OrderId&quot;:7789231,&quot;ClientRedirectURL&quot;:&quot;&quot;,&quot;PaymentMessage&quot;:&quot;The transaction you have submitted has already been processed.&quot;,&quot;RecommendedDisplayType&quot;:&quot;None&quot;,&quot;ProviderReference&quot;:&quot;&quot;,&quot;PostParameters&quot;:&quot;&quot;,&quot;PaymentStatus&quot;:&quot;REJECTED&quot;,&quot;RecommendedDisplayHeight&quot;:0}']" actualValue="#[payload]" doc:name="Assert Error Response" message="Response message is not valid as expected"/>
    </munit:test>
    
    <munit:test name="DepositsFlow-TestCase4(SuccessScenariowithout3DS)" description="Verifying deposits flow with test request for success scenario">
        <mock:when messageProcessor=".*:.*" doc:name="Mock Authorization API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Authorization API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['{&quot;links&quot;:[{&quot;rel&quot;:&quot;settlement&quot;,&quot;href&quot;:&quot;https://api.test.paysafe.com/cardpayments/v1/accounts/1001218660/settlements/2066890e-9804-492e-b072-ff5c7c0e1c05&quot;},{&quot;rel&quot;:&quot;self&quot;,&quot;href&quot;:&quot;https://api.test.paysafe.com/cardpayments/v1/accounts/1001218660/auths/2066890e-9804-492e-b072-ff5c7c0e1c05&quot;}],&quot;id&quot;:&quot;2066890e-9804-492e-b072-ff5c7c0e1c05&quot;,&quot;merchantRefNum&quot;:&quot;124645112&quot;,&quot;txnTime&quot;:&quot;2018-06-25T13:47:02Z&quot;,&quot;status&quot;:&quot;COMPLETED&quot;,&quot;amount&quot;:100000,&quot;settleWithAuth&quot;:true,&quot;preAuth&quot;:false,&quot;availableToSettle&quot;:0,&quot;card&quot;:{&quot;type&quot;:&quot;VI&quot;,&quot;lastDigits&quot;:&quot;0007&quot;,&quot;cardExpiry&quot;:{&quot;month&quot;:9,&quot;year&quot;:2021}},&quot;authCode&quot;:&quot;102457&quot;,&quot;profile&quot;:{&quot;firstName&quot;:&quot;Joe&quot;,&quot;lastName&quot;:&quot;Smith&quot;,&quot;email&quot;:&quot;Joe.Smith@canada.com&quot;},&quot;billingDetails&quot;:{&quot;street&quot;:&quot;100 Queen Street West&quot;,&quot;city&quot;:&quot;Toronto&quot;,&quot;state&quot;:&quot;ON&quot;,&quot;country&quot;:&quot;CA&quot;,&quot;zip&quot;:&quot;M5H2N2&quot;,&quot;phone&quot;:&quot;9876543223&quot;},&quot;customerIp&quot;:&quot;204&quot;,&quot;merchantDescriptor&quot;:{&quot;dynamicDescriptor&quot;:&quot;DD Line 1&quot;,&quot;phone&quot;:&quot;000-111000099&quot;},&quot;visaAdditionalAuthData&quot;:{},&quot;description&quot;:&quot;Deposited Purchase&quot;,&quot;currencyCode&quot;:&quot;GBP&quot;,&quot;avsResponse&quot;:&quot;NOT_PROCESSED&quot;,&quot;cvvVerification&quot;:&quot;NOT_PROCESSED&quot;,&quot;settlements&quot;:[{&quot;links&quot;:[{&quot;rel&quot;:&quot;self&quot;,&quot;href&quot;:&quot;https://api.test.paysafe.com/cardpayments/v1/accounts/1001218660/settlements/2066890e-9804-492e-b072-ff5c7c0e1c05&quot;}],&quot;id&quot;:&quot;2066890e-9804-492e-b072-ff5c7c0e1c05&quot;,&quot;merchantRefNum&quot;:&quot;124645112&quot;,&quot;txnTime&quot;:&quot;2018-06-25T13:47:02Z&quot;,&quot;status&quot;:&quot;PENDING&quot;,&quot;amount&quot;:100000,&quot;availableToRefund&quot;:100000}]}']"/>
        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy on pre publish to queue">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['paymentCmf Queue']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-on-equals message="Response message is not valid as expected" expectedValue="#['{&quot;OrderId&quot;:124645112,&quot;ClientIp&quot;:&quot;204&quot;,&quot;ProviderReference&quot;:&quot;2066890e-9804-492e-b072-ff5c7c0e1c05&quot;,&quot;ProviderCode&quot;:&quot;0000&quot;,&quot;ProviderMessage&quot;:&quot;COMPLETED&quot;,&quot;ProviderApproved&quot;:&quot;true&quot;,&quot;CurrencyReceived&quot;:&quot;GBP&quot;,&quot;AmountReceived&quot;:1000.0,&quot;ClientAccNo&quot;:&quot;JoeSmith&quot;,&quot;ClientAccName&quot;:&quot;JoeSmith&quot;,&quot;AVSres&quot;:&quot;NOT_PROCESSED&quot;,&quot;Country&quot;:&quot;&quot;,&quot;InstrumentType&quot;:&quot;Card account&quot;}']" actualValue="#[payload.toString()]" doc:name="Check Response to Queue"/>
            </mock:assertions-before-call>
        </mock:spy>
        <munit:set payload="#['{&quot;CustomerId&quot;:&quot;1198765450081&quot;,&quot;OrderId&quot;:124645112,&quot;ProductId&quot;:287,&quot;LegalEntity&quot;:&quot;Axicorp Limited&quot;,&quot;Currency&quot;:&quot;GBP&quot;,&quot;Amount&quot;:1000.00,&quot;ClientIp&quot;:&quot;204&quot;,&quot;ClientSessionId&quot;:&quot;QWE!@#wasdferty&quot;,&quot;SystemSourceId&quot;:6,&quot;InstrumentToken&quot;:&quot;CXta1O3GXfNJ3uN&quot;,&quot;Client&quot;:{&quot;FirstName&quot;:&quot;Joe&quot;,&quot;LastName&quot;:&quot;Smith&quot;,&quot;Phone&quot;:&quot;9876543223&quot;,&quot;Address&quot;:&quot;100 Queen Street West&quot;,&quot;City&quot;:&quot;Toronto&quot;,&quot;Country&quot;:&quot;CA&quot;,&quot;State&quot;:&quot;ON&quot;,&quot;Postcode&quot;:&quot;M5H 2N2&quot;,&quot;Email&quot;:&quot;Joe.Smith@canada.com&quot;},&quot;AdditionalInfo&quot;:{}}']" doc:name="Set Request Payload"/>
        <logger message="#['Request Payload \n '+payload+'\n']" level="INFO" doc:name="Request Payload" category="MUnit Test || DepositsFlow-TestCase4(SuccessScenariowithout3DS)"/>
        <flow-ref name="depositsFlow" doc:name="Flow-ref to depositsFlow"/>
        <logger level="INFO" doc:name="Response Payload" message="#['Response Payload \n '+payload+'\n']" category="MUnit Test || DepositsFlow-TestCase4(SuccessScenariowithout3DS)"/>
        <munit:assert-on-equals expectedValue="#['{&quot;OrderId&quot;:124645112,&quot;ProviderReference&quot;:&quot;2066890e-9804-492e-b072-ff5c7c0e1c05&quot;,&quot;ClientRedirectURL&quot;:&quot;&quot;,&quot;ClientRedirectType&quot;:&quot;NA&quot;,&quot;PostParameters&quot;:&quot;&quot;,&quot;PostPayload&quot;:&quot;&quot;,&quot;RecommendedDisplayType&quot;:&quot;None&quot;,&quot;RecommendedDisplayWidth&quot;:0,&quot;RecommendedDisplayHeight&quot;:0,&quot;PaymentStatus&quot;:&quot;ACCEPTED&quot;,&quot;PaymentCode&quot;:&quot;0000&quot;,&quot;PaymentMessage&quot;:&quot;COMPLETED&quot;,&quot;AdditionalInfo&quot;:{&quot;CardType&quot;:&quot;Visa&quot;,&quot;IsDebit&quot;:&quot;false&quot;,&quot;CardIssuedCountry&quot;:&quot;AU&quot;,&quot;AuthCode&quot;:&quot;102457&quot;}}']" actualValue="#[payload]" doc:name="Check Response Payload" message="Response message is not valid as expected"/>
    </munit:test>
    
</mule>
