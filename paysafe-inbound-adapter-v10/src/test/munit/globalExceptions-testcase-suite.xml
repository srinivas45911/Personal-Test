<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
  <spring:beans>
        <spring:import resource="classpath:api.xml"/>
        <spring:import resource="classpath:clienttoken.xml"/>
        <spring:import resource="classpath:config.xml"/>
        <spring:import resource="classpath:deposits.xml"/>
        <spring:import resource="classpath:threedsecure.xml"/>
        <spring:import resource="classpath:instrument.xml"/>
        <spring:import resource="classpath:checkstatus.xml"/>
        <spring:import resource="classpath:error-handler.xml"/>
        <spring:import resource="classpath:withdrawals.xml"/>

    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="Api-httpListenerConfig" host="localhost" port="${endpoint.port}" doc:name="HTTP Listener Configuration" basePath="${endpoint.path}"/>

     <munit:test name="Globalexception-apikit-TestCase(404)"
              description="Verifying functionality of http status 404 in deposits" >
              <munit:set
                     payload="#['{&quot;CustomerId&quot;:&quot;1198000012345&quot;,&quot;OrderId&quot;:7789233,&quot;ProductId&quot;:287,&quot;LegalEntity&quot;:&quot;Axicorp Limited&quot;,&quot;Currency&quot;:&quot;PLN&quot;,&quot;Amount&quot;:1000,&quot;ClientIp&quot;:&quot;204.91.0.12&quot;,&quot;ClientSessionId&quot;:&quot;QWE!@#wasdferty&quot;,&quot;SystemSourceId&quot;:6,&quot;InstrumentToken&quot;:&quot;C58vIo0FlWWydf4&quot;,&quot;Client&quot;:{&quot;FirstName&quot;:&quot;Joe&quot;,&quot;LastName&quot;:&quot;Smith&quot;,&quot;Phone&quot;:&quot;9876543223&quot;,&quot;Address&quot;:&quot;100 Queen Street West&quot;,&quot;City&quot;:&quot;Toronto&quot;,&quot;Country&quot;:&quot;CA&quot;,&quot;State&quot;:&quot;ON&quot;,&quot;Postcode&quot;:&quot;M5H 2N2&quot;,&quot;Email&quot;:&quot;Joe.Smith@canada.com&quot;,&quot;Phone&quot;:&quot;9874561230&quot;},&quot;3DSInfo&quot;:{&quot;ECI&quot;:&quot;5&quot;,&quot;CAVV&quot;:&quot;AAABBhkXYgAAAAACBxdiENhf7A+=&quot;},&quot;AdditionalInfo&quot;:{}}']"
                     doc:name="Set Request Payload" />
              <json:json-to-object-transformer
                     returnClass="java.util.HashMap" doc:name="JSON to Object" />
              <logger
                     message="#['Request Payload \n CustomerId : '+payload.CustomerId+'\n OrderId : '+payload.OrderId+'\n ProductId : '+payload.ProductId+'\n LegalEntity: '+payload.LegalEntity+'\n Currency: '+payload.Currency+'\n Amount: '+payload.Amount+'\n ClientIp: '+payload.ClientIp+'\n InstrumentToken: '+payload.InstrumentToken+'\n FirstName: '+payload.Client.FirstName+'\n LastName: '+payload.Client.LastName+'\n Phone: '+payload.Client.Phone+'\n Country: '+payload.Client.Country+'\n Email: '+payload.Client.Email+'\n ECI: '+payload.3DSInfo.ECI+'\n CAVV: '+payload.3DSInfo.CAVV+'\n']"
                     level="INFO" category="MUnit || Globalexception-apikit-TestCase(404)" doc:name="Request Payload" />
        <json:object-to-json-transformer doc:name="Object to JSON"/>
              <http:request config-ref="Api-httpListenerConfig"
                     path="/Depo" method="POST" doc:name="Access Invalid Resource to Validate 404 Error">
                     <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>


                     </http:request-builder>
                     <http:success-status-code-validator
                           values="404" />
              </http:request>
              <object-to-string-transformer doc:name="HTTP Response to String" />
              <munit:assert-true message="The HTTP Status code is not correct!"
                     condition="#[messageInboundProperty('http.status').is(eq(404))]"
                     doc:name="Assert HTTP Status Eq 404" />
              <logger message="#['Response Payload\nException : '+payload+' : Accessing incorrect resource.\n']" level="INFO"
                     category="MUnit || Globalexception-apikit-TestCase(404)" doc:name="Response Payload" />
              <munit:assert-on-equals message="The response payload is not correct!"
                     expectedValue="#['{ &quot;message&quot;: &quot;Resource not found&quot; }']"
                     actualValue="#[payload]" doc:name="Assert That Payload is as Expected" />
       </munit:test>
       <munit:test name="Globalexception-apikit-TestCase(405)"
              description="Verifying functionality of [post:/Deposits:application/json:api-config-405-application/json]" >
              <munit:set
                     payload="#['{&quot;CustomerId&quot;:&quot;1198000012345&quot;,&quot;OrderId&quot;:7789233,&quot;ProductId&quot;:287,&quot;LegalEntity&quot;:&quot;Axicorp Limited&quot;,&quot;Currency&quot;:&quot;PLN&quot;,&quot;Amount&quot;:1000,&quot;ClientIp&quot;:&quot;204.91.0.12&quot;,&quot;ClientSessionId&quot;:&quot;QWE!@#wasdferty&quot;,&quot;SystemSourceId&quot;:6,&quot;InstrumentToken&quot;:&quot;C58vIo0FlWWydf4&quot;,&quot;Client&quot;:{&quot;FirstName&quot;:&quot;Joe&quot;,&quot;LastName&quot;:&quot;Smith&quot;,&quot;Phone&quot;:&quot;9876543223&quot;,&quot;Address&quot;:&quot;100 Queen Street West&quot;,&quot;City&quot;:&quot;Toronto&quot;,&quot;Country&quot;:&quot;CA&quot;,&quot;State&quot;:&quot;ON&quot;,&quot;Postcode&quot;:&quot;M5H 2N2&quot;,&quot;Email&quot;:&quot;Joe.Smith@canada.com&quot;,&quot;Phone&quot;:&quot;9874561230&quot;},&quot;3DSInfo&quot;:{&quot;ECI&quot;:&quot;5&quot;,&quot;CAVV&quot;:&quot;AAABBhkXYgAAAAACBxdiENhf7A+=&quot;},&quot;AdditionalInfo&quot;:{}}']"
                     doc:name="Set Request Payload" />
              <json:json-to-object-transformer
                     returnClass="java.util.HashMap" doc:name="JSON to Object" />
              <logger
                     message="#['Request Payload \n CustomerId : '+payload.CustomerId+'\n OrderId : '+payload.OrderId+'\n ProductId : '+payload.ProductId+'\n LegalEntity: '+payload.LegalEntity+'\n Currency: '+payload.Currency+'\n Amount: '+payload.Amount+'\n ClientIp: '+payload.ClientIp+'\n InstrumentToken: '+payload.InstrumentToken+'\n FirstName: '+payload.Client.FirstName+'\n LastName: '+payload.Client.LastName+'\n Phone: '+payload.Client.Phone+'\n Country: '+payload.Client.Country+'\n Email: '+payload.Client.Email+'\n ECI: '+payload.3DSInfo.ECI+'\n CAVV: '+payload.3DSInfo.CAVV+'\n']"
                     level="INFO" category="MUnit || Globalexception-apikit-TestCase(405)" doc:name="Request Payload" />
        <json:object-to-json-transformer doc:name="Object to JSON"/>
              <http:request config-ref="Api-httpListenerConfig"
                     path="/Deposits" method="GET" doc:name="Access Invalid Method to Validate 405 Error">
                     <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>


                     </http:request-builder>
                     <http:success-status-code-validator
                           values="405" />
              </http:request>
              <object-to-string-transformer doc:name="HTTP Response to String" />
              <munit:assert-true message="The HTTP Status code is not correct!"
                     condition="#[messageInboundProperty('http.status').is(eq(405))]"
                     doc:name="Assert HTTP Status Eq 405" />
              <logger message="#['Response Payload\nException : '+payload+' : Accessing Invalid Method.\n']"
                     level="INFO" category="MUnit || Globalexception-apikit-TestCase(405)"
                     doc:name="Response Payload" />
              <munit:assert-on-equals message="The response payload is not correct!"
                     expectedValue="#['{ &quot;message&quot;: &quot;Method not allowed&quot; }']"
                     actualValue="#[payload]" doc:name="Assert That Payload is as Expected" />
       </munit:test>

       <munit:test name="Globalexception-apikit-TestCase(400)"
              description="Verifying functionality of [post:/Deposits:application/json:api-config-400-application/json]" >
              <munit:set
                     payload="#['{&quot;CustomerId&quot;:&quot;1198000012345&quot;&quot;OrderId&quot;:7789233,&quot;ProductId&quot;:287,&quot;LegalEntity&quot;:&quot;Axicorp Limited&quot;,&quot;Currency&quot;:&quot;PLN&quot;,&quot;Amount&quot;:1000,&quot;ClientIp&quot;:&quot;204.91.0.12&quot;,&quot;ClientSessionId&quot;:&quot;QWE!@#wasdferty&quot;,&quot;SystemSourceId&quot;:6,&quot;InstrumentToken&quot;:&quot;C58vIo0FlWWydf4&quot;,&quot;Client&quot;:{&quot;FirstName&quot;:&quot;Joe&quot;,&quot;LastName&quot;:&quot;Smith&quot;,&quot;Phone&quot;:&quot;9876543223&quot;,&quot;Address&quot;:&quot;100 Queen Street West&quot;,&quot;City&quot;:&quot;Toronto&quot;,&quot;Country&quot;:&quot;CA&quot;,&quot;State&quot;:&quot;ON&quot;,&quot;Postcode&quot;:&quot;M5H 2N2&quot;,&quot;Email&quot;:&quot;Joe.Smith@canada.com&quot;,&quot;Phone&quot;:&quot;9874561230&quot;},&quot;3DSInfo&quot;:{&quot;ECI&quot;:&quot;5&quot;,&quot;CAVV&quot;:&quot;AAABBhkXYgAAAAACBxdiENhf7A+=&quot;},&quot;AdditionalInfo&quot;:{}}']"
                     doc:name="Set Request Message" />
              <logger
                     message="#['Request Payload \n'+payload+'\n is not a valid JSON Structure']"
                     level="INFO" category="MUnit || Globalexception-apikit-TestCase(400)" doc:name="Request Payload" />
              <http:request config-ref="Api-httpListenerConfig"
                     path="/Deposits" method="POST"
                     doc:name="Passing invalid request to validate 400 error">
                     <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>

                     </http:request-builder>
                     <http:success-status-code-validator
                           values="400" />
              </http:request>
              <object-to-string-transformer doc:name="HTTP Response to String" />
              <munit:assert-true message="The HTTP Status code is not correct!"
                     condition="#[messageInboundProperty('http.status').is(eq(400))]"
                     doc:name="Assert HTTP Status Eq 400" />
              <logger message="#['Response Payload\nException : '+payload+' : Invalid Json Structure.\n']"
                     level="INFO" category="MUnit || Globalexception-apikit-TestCase(400)" doc:name="Response Payload" />
              <munit:assert-on-equals message="The response payload is not correct!"
                     expectedValue="#['{ &quot;message&quot;: &quot;Bad request&quot; }']"
                     actualValue="#[payload]" doc:name="Assert That Payload is as Expected" />
       </munit:test>
       <munit:test name="Globalexception-apikit-TestCase(415)"
              description="Verifying functionality of [post:/Deposits:application/json:api-config-415-application/json]" >
              <munit:set payload="#['&lt;xml&gt;A&lt;/xml&gt;']" mimeType="application/xml"
                     doc:name="Set Request Message" />
              <logger
                     message="#['Request Payload\n : ' +payload+'\n']"
                     level="INFO" category="MUnit || Globalexception-apikit-TestCase(415)" doc:name="Request Payload" />
              <http:request config-ref="Api-httpListenerConfig"
                     path="/Notify" method="POST"
                     doc:name="Passing Invalid MIME Type to Validate 415 Error">
                     <http:success-status-code-validator
                           values="415" />
              </http:request>
              <object-to-string-transformer doc:name="HTTP Response to String" />
              <munit:assert-true message="The HTTP Status code is not correct!"
                     condition="#[messageInboundProperty('http.status').is(eq(415))]"
                     doc:name="Assert HTTP Status Eq 415" />
              <logger message="#['Response Payload\n Exception :'+payload+' : Unsupported Media Type.\n']"
                     level="INFO" category="MUnit || Globalexception-apikit-TestCase(415)" doc:name="Response Payload" />
              <munit:assert-on-equals message="The response payload is not correct!"
                     expectedValue="#['{ &quot;message&quot;: &quot;Unsupported media type&quot; }']"
                     actualValue="#[payload]" doc:name="Assert That Payload is as Expected" />
       </munit:test>
       <munit:test name="Globalexception-apikit-TestCase(406)"
              description="Verifying functionality of [post:/Deposits:application/json:api-config-406-application/json]" >
              <munit:set
                     payload="#['{&quot;CustomerId&quot;:&quot;1198000012345&quot;,&quot;OrderId&quot;:7789233,&quot;ProductId&quot;:287,&quot;LegalEntity&quot;:&quot;Axicorp Limited&quot;,&quot;Currency&quot;:&quot;PLN&quot;,&quot;Amount&quot;:1000,&quot;ClientIp&quot;:&quot;204.91.0.12&quot;,&quot;ClientSessionId&quot;:&quot;QWE!@#wasdferty&quot;,&quot;SystemSourceId&quot;:6,&quot;InstrumentToken&quot;:&quot;C58vIo0FlWWydf4&quot;,&quot;Client&quot;:{&quot;FirstName&quot;:&quot;Joe&quot;,&quot;LastName&quot;:&quot;Smith&quot;,&quot;Phone&quot;:&quot;9876543223&quot;,&quot;Address&quot;:&quot;100 Queen Street West&quot;,&quot;City&quot;:&quot;Toronto&quot;,&quot;Country&quot;:&quot;CA&quot;,&quot;State&quot;:&quot;ON&quot;,&quot;Postcode&quot;:&quot;M5H 2N2&quot;,&quot;Email&quot;:&quot;Joe.Smith@canada.com&quot;,&quot;Phone&quot;:&quot;9874561230&quot;},&quot;3DSInfo&quot;:{&quot;ECI&quot;:&quot;5&quot;,&quot;CAVV&quot;:&quot;AAABBhkXYgAAAAACBxdiENhf7A+=&quot;},&quot;AdditionalInfo&quot;:{}}']"
                     doc:name="Set Request Message" />
                     <json:json-to-object-transformer
                     returnClass="java.util.HashMap" doc:name="JSON to Object" />
              <logger
                     
                     level="INFO" category="MUnit || Globalexception-apikit-TestCase(406)" doc:name="Request Payload" message="#['Request Payload \n CustomerId : '+payload.CustomerId+'\n OrderId : '+payload.OrderId+'\n ProductId : '+payload.ProductId+'\n LegalEntity: '+payload.LegalEntity+'\n Currency: '+payload.Currency+'\n Amount: '+payload.Amount+'\n ClientIp: '+payload.ClientIp+'\n InstrumentToken: '+payload.InstrumentToken+'\n FirstName: '+payload.Client.FirstName+'\n LastName: '+payload.Client.LastName+'\n Phone: '+payload.Client.Phone+'\n Country: '+payload.Client.Country+'\n Email: '+payload.Client.Email+'\n ECI: '+payload.3DSInfo.ECI+'\n CAVV: '+payload.3DSInfo.CAVV+'\n']"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
              <http:request config-ref="Api-httpListenerConfig"
                     path="/Deposits" method="POST"
                     doc:name="Passing Invalid header Value to Validate 406 Error">
                     <http:request-builder>
                <http:header headerName="Accept" value="application/xml"/>
                <http:header headerName="Content-Type" value="application/json"/>

                     </http:request-builder>
                     <http:success-status-code-validator
                           values="406" />
              </http:request>
              <object-to-string-transformer doc:name="HTTP Response to String" />
              <munit:assert-true message="The HTTP Status code is not correct!"
                     condition="#[messageInboundProperty('http.status').is(eq(406))]"
                     doc:name="Assert HTTP Status Eq 406" />
              <logger message="#['Response Payload\nException :'+payload+' : Content not Acceptable.\n']"
                     level="INFO" category="MUnit || Globalexception-apikit-TestCase(406)" doc:name="Response Payload" />
              <munit:assert-on-equals message="The response payload is not correct!"
                     expectedValue="#['{ &quot;message&quot;: &quot;Not acceptable&quot; }']"
                     actualValue="#[payload]" doc:name="Assert That Payload is as Expected" />
       </munit:test>
       <munit:test name="Globalexception-apikit-TestCase(201)"
              description="Test" >
        <mock:when messageProcessor=".*:.*" doc:name="Mock Authorization API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Authorization API']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['{&quot;links&quot;:[{&quot;rel&quot;:&quot;settlement&quot;,&quot;href&quot;:&quot;https://api.test.paysafe.com/cardpayments/v1/accounts/1001218660/settlements/1540d057-ac93-4501-95d0-8f729b7247dc&quot;},{&quot;rel&quot;:&quot;self&quot;,&quot;href&quot;:&quot;https://api.test.paysafe.com/cardpayments/v1/accounts/1001218660/auths/1540d057-ac93-4501-95d0-8f729b7247dc&quot;}],&quot;id&quot;:&quot;1540d057-ac93-4501-95d0-8f729b7247dc&quot;,&quot;merchantRefNum&quot;:&quot;7789271&quot;,&quot;txnTime&quot;:&quot;2018-06-06T07:13:08Z&quot;,&quot;status&quot;:&quot;COMPLETED&quot;,&quot;amount&quot;:100000,&quot;settleWithAuth&quot;:true,&quot;preAuth&quot;:false,&quot;availableToSettle&quot;:0,&quot;card&quot;:{&quot;type&quot;:&quot;VI&quot;,&quot;lastDigits&quot;:&quot;2345&quot;,&quot;cardExpiry&quot;:{&quot;month&quot;:12,&quot;year&quot;:2020}},&quot;authentication&quot;:{&quot;eci&quot;:5,&quot;cavv&quot;:&quot;AAABBhkXYgAAAAACBxdiENhf7A+=&quot;},&quot;authCode&quot;:&quot;100869&quot;,&quot;profile&quot;:{&quot;firstName&quot;:&quot;Joe&quot;,&quot;lastName&quot;:&quot;Smith&quot;,&quot;email&quot;:&quot;Joe.Smith@canada.com&quot;},&quot;billingDetails&quot;:{&quot;street&quot;:&quot;100 Queen Street West&quot;,&quot;city&quot;:&quot;Toronto&quot;,&quot;state&quot;:&quot;ON&quot;,&quot;country&quot;:&quot;CA&quot;,&quot;zip&quot;:&quot;M5H2N2&quot;,&quot;phone&quot;:&quot;9874561230&quot;},&quot;customerIp&quot;:&quot;204.91.0.12&quot;,&quot;merchantDescriptor&quot;:{&quot;dynamicDescriptor&quot;:&quot;DD Line 1&quot;,&quot;phone&quot;:&quot;000-111000099&quot;},&quot;visaAdditionalAuthData&quot;:{},&quot;description&quot;:&quot;Videopurchase&quot;,&quot;currencyCode&quot;:&quot;GBP&quot;,&quot;avsResponse&quot;:&quot;MATCH&quot;,&quot;cvvVerification&quot;:&quot;NOT_PROCESSED&quot;,&quot;settlements&quot;:[{&quot;links&quot;:[{&quot;rel&quot;:&quot;self&quot;,&quot;href&quot;:&quot;https://api.test.paysafe.com/cardpayments/v1/accounts/1001218660/settlements/1540d057-ac93-4501-95d0-8f729b7247dc&quot;}],&quot;id&quot;:&quot;1540d057-ac93-4501-95d0-8f729b7247dc&quot;,&quot;merchantRefNum&quot;:&quot;7789271&quot;,&quot;txnTime&quot;:&quot;2018-06-06T07:13:08Z&quot;,&quot;status&quot;:&quot;PENDING&quot;,&quot;amount&quot;:1000,&quot;availableToRefund&quot;:1000}]}']"/>
        </mock:when>
              <munit:set
                     payload="#['{&quot;CustomerId&quot;:&quot;1198000012345&quot;,&quot;OrderId&quot;:7789233,&quot;ProductId&quot;:287,&quot;LegalEntity&quot;:&quot;Axicorp Limited&quot;,&quot;Currency&quot;:&quot;GBP&quot;,&quot;Amount&quot;:1000,&quot;ClientIp&quot;:&quot;204.91.0.12&quot;,&quot;ClientSessionId&quot;:&quot;QWE!@#wasdferty&quot;,&quot;SystemSourceId&quot;:6,&quot;InstrumentToken&quot;:&quot;C58vIo0FlWWydf4&quot;,&quot;Client&quot;:{&quot;FirstName&quot;:&quot;Joe&quot;,&quot;LastName&quot;:&quot;Smith&quot;,&quot;Phone&quot;:&quot;9876543223&quot;,&quot;Address&quot;:&quot;100 Queen Street West&quot;,&quot;City&quot;:&quot;Toronto&quot;,&quot;Country&quot;:&quot;CA&quot;,&quot;State&quot;:&quot;ON&quot;,&quot;Postcode&quot;:&quot;M5H 2N2&quot;,&quot;Email&quot;:&quot;Joe.Smith@canada.com&quot;,&quot;Phone&quot;:&quot;9874561230&quot;},&quot;3DSInfo&quot;:{&quot;ECI&quot;:&quot;5&quot;,&quot;CAVV&quot;:&quot;AAABBhkXYgAAAAACBxdiENhf7A+=&quot;},&quot;AdditionalInfo&quot;:{}}']"
                     doc:name="Set Request Message" mimeType="application/json" />
                     <json:json-to-object-transformer
                     returnClass="java.util.HashMap" doc:name="JSON to Object" />
              <logger
                     message="#['Request Payload \n CustomerId : '+payload.CustomerId+'\n OrderId : '+payload.OrderId+'\n ProductId : '+payload.ProductId+'\n LegalEntity: '+payload.LegalEntity+'\n Currency: '+payload.Currency+'\n Amount: '+payload.Amount+'\n ClientIp: '+payload.ClientIp+'\n InstrumentToken: '+payload.InstrumentToken+'\n FirstName: '+payload.Client.FirstName+'\n LastName: '+payload.Client.LastName+'\n Phone: '+payload.Client.Phone+'\n Country: '+payload.Client.Country+'\n Email: '+payload.Client.Email+'\n ECI: '+payload.3DSInfo.ECI+'\n CAVV: '+payload.3DSInfo.CAVV+'\n']"
                     level="INFO" category="MUnit || Globalexception-apikit-TestCase(201)" doc:name="Request Payload" />
        <json:object-to-json-transformer doc:name="Object to JSON"/>
              <http:request config-ref="Api-httpListenerConfig"
                     path="/Deposits" method="POST" doc:name="Passing Valid Request to Validate HTTP Status 201">
                     <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="Content-Type" value="application/json"/>


                     </http:request-builder>
                     <http:success-status-code-validator
                           values="201" />
              </http:request>
              <object-to-string-transformer doc:name="HTTP Response to String" />
              <munit:assert-true message="The HTTP Status code is not correct!"
                     condition="#[messageInboundProperty('http.status').is(eq(201))]"
                     doc:name="Assert HTTP Status Eq 201" />
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
              <logger message="#['Response Payload \n OrderId : '+payload.OrderId+'\n ProviderReference : '+payload.ProviderReference+'\n ClientRedirectURL : '+payload.ClientRedirectURL+'\n ClientRedirectType: '+payload.ClientRedirectType+'\n PostParameters: '+payload.PostParameters+'\n PostPayload: '+payload.PostPayload+'\n RecommendedDisplayType: '+payload.RecommendedDisplayType+'\n RecommendedDisplayWidth: '+payload.RecommendedDisplayWidth+'\n RecommendedDisplayHeight: '+payload.RecommendedDisplayHeight+'\n PaymentStatus: '+payload.PaymentStatus+'\n PaymentCode: '+payload.PaymentCode+'\n PaymentMessage: '+payload.PaymentMessage+'\n CardType: '+payload.AdditionalInfo.CardType+'\n IsDebit: '+payload.AdditionalInfo.IsDebit+'\n CardIssuedCountry: '+payload.AdditionalInfo.CardIssuedCountry+'\n AuthCode: '+payload.AdditionalInfo.AuthCode+'\n']" level="INFO" category="MUnit || Globalexception-apikit-TestCase(201)"
                     doc:name="Response Payload" />
        <json:object-to-json-transformer doc:name="Object to JSON"/>
              <munit:assert-on-equals message="The response payload is not correct!"
                     expectedValue="#['{&quot;ClientRedirectType&quot;:&quot;NA&quot;,&quot;AdditionalInfo&quot;:{&quot;CardType&quot;:&quot;Visa&quot;,&quot;IsDebit&quot;:&quot;false&quot;,&quot;CardIssuedCountry&quot;:&quot;AU&quot;,&quot;AuthCode&quot;:&quot;100869&quot;},&quot;PaymentCode&quot;:&quot;0000&quot;,&quot;PostPayload&quot;:&quot;&quot;,&quot;RecommendedDisplayWidth&quot;:0,&quot;OrderId&quot;:7789271,&quot;ClientRedirectURL&quot;:&quot;&quot;,&quot;PaymentMessage&quot;:&quot;COMPLETED&quot;,&quot;RecommendedDisplayType&quot;:&quot;None&quot;,&quot;ProviderReference&quot;:&quot;1540d057-ac93-4501-95d0-8f729b7247dc&quot;,&quot;PostParameters&quot;:&quot;&quot;,&quot;PaymentStatus&quot;:&quot;ACCEPTED&quot;,&quot;RecommendedDisplayHeight&quot;:0}']"
                     actualValue="#[payload]" doc:name="Assert That Payload is as Expected" />
       </munit:test>
<!--        <munit:test name="Globalexception-apikit-TestCase(500)"
              description="Verifying functionality of 500 GlobalException" ignore="true">
        <mock:throw-an exception-ref="#[new java.net.ConnectException()]" whenCalling=".*:.*" doc:name="Throw 500 Exception on HTTP">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Authorization API']"/>
            </mock:with-attributes>
        </mock:throw-an>
              <munit:set
                     payload="#['{&quot;CustomerId&quot;:&quot;1198000012345&quot;,&quot;OrderId&quot;:7789233,&quot;ProductId&quot;:287,&quot;LegalEntity&quot;:&quot;Axicorp Limited&quot;,&quot;Currency&quot;:&quot;PLN&quot;,&quot;Amount&quot;:1000,&quot;ClientIp&quot;:&quot;204.91.0.12&quot;,&quot;ClientSessionId&quot;:&quot;QWE!@#wasdferty&quot;,&quot;SystemSourceId&quot;:6,&quot;InstrumentToken&quot;:&quot;C58vIo0FlWWydf4&quot;,&quot;Client&quot;:{&quot;FirstName&quot;:&quot;Joe&quot;,&quot;LastName&quot;:&quot;Smith&quot;,&quot;Phone&quot;:&quot;9876543223&quot;,&quot;Address&quot;:&quot;100 Queen Street West&quot;,&quot;City&quot;:&quot;Toronto&quot;,&quot;Country&quot;:&quot;CA&quot;,&quot;State&quot;:&quot;ON&quot;,&quot;Postcode&quot;:&quot;M5H 2N2&quot;,&quot;Email&quot;:&quot;Joe.Smith@canada.com&quot;,&quot;Phone&quot;:&quot;9874561230&quot;},&quot;3DSInfo&quot;:{&quot;ECI&quot;:&quot;5&quot;,&quot;CAVV&quot;:&quot;AAABBhkXYgAAAAACBxdiENhf7A+=&quot;},&quot;AdditionalInfo&quot;:{}}']"
                     mimeType="application/json" doc:name="Set Request Message" />
                     <json:json-to-object-transformer
                     returnClass="java.util.HashMap" doc:name="JSON to Object" />
              <logger
                     
                     level="INFO" category="MUnit || Globalexception-apikit-TestCase(500)" doc:name="Request Payload" message="#['Request Payload \n CustomerId : '+payload.CustomerId+'\n OrderId : '+payload.OrderId+'\n ProductId : '+payload.ProductId+'\n LegalEntity: '+payload.LegalEntity+'\n Currency: '+payload.Currency+'\n Amount: '+payload.Amount+'\n ClientIp: '+payload.ClientIp+'\n InstrumentToken: '+payload.InstrumentToken+'\n FirstName: '+payload.Client.FirstName+'\n LastName: '+payload.Client.LastName+'\n Phone: '+payload.Client.Phone+'\n Country: '+payload.Client.Country+'\n Email: '+payload.Client.Email+'\n ECI: '+payload.3DSInfo.ECI+'\n CAVV: '+payload.3DSInfo.CAVV+'\n']"/>
       <json:object-to-json-transformer doc:name="Object to JSON"/>
              <http:request config-ref="Api-httpListenerConfig"
                     path="/Deposits" method="POST" doc:name="Checking Internal Server Error">
                     <http:success-status-code-validator
                           values="201" />
              </http:request>
              <object-to-string-transformer doc:name="HTTP Response to String" />
              <munit:assert-true message="The HTTP Status code is not correct!"
                     condition="#[messageInboundProperty('http.status').is(eq(201))]"
                     doc:name="Assert HTTP Status Eq 500" />
              <logger message="#['Response Payload\nException :'+payload+' :  Internal Server Error.\n']"
                     level="INFO" category="MUnit || Globalexception-apikit-TestCase(500)" doc:name="Response Payload" />
              <munit:assert-on-equals message="The response payload is not correct!"
                     expectedValue="#['{&quot;message&quot;:&quot;Exception &quot;}']"
                     actualValue="#[payload]" doc:name="Assert That Payload is as Expected" />
       </munit:test> -->
</mule>
